type User {
	user_id:   String! 
	user_type: String!
	first_name: String!    
	last_name:  String!     
	email:     String!     
	job_title: String!
	timezone:  String!    
	status: String! 
}

input AddUsersInput {
	first_name: String!  
	last_name:  String!   
	email:     String!   
	job_title: String! 
	password:  String!   
	timezone:  String! 
}

input ChangePasswordInput {
	password: String! 
	user_id: String!
}

# Logout uses access token derived from the refresh token. This removes all refresh tokens belonging to that user on logout.
extend type Query{
	"""
	Logout current user.
	+ **Route**: Private
	+ **Permission**: based on user ID
	"""
	logoutUser: String
	"""
	Get user.
	+ **Route**: Private
	+ **Permission**: based on user ID
	"""
	getUser(user_id: String!): User
	"""
	Get users.
	+ **Route**: Private
	+ **Permission**: based on user ID
	"""
	getUsers: [User]
}

extend type Mutation {
	"""
	Creating a user and attaching to an environment.
	+ **Route**: Private
	+ **Permission**: admin_platform (write), platform_manage_users (write)
	"""
  	createUser(input: AddUsersInput): User
	"""
	Change password on behalf of user.
	+ **Route**: Private
	+ **Permission**: admin_platform, platform_manage_users
	"""
	updateChangePassword(input: ChangePasswordInput): String
	"""
	Deactivate user.
	+ **Route**: Private
	+ **Permission**: admin_platform, platform_manage_users
	"""
	updateDeactivateUser(userid: String!): String
	"""
	Delete user.
	+ **Route**: Private
	+ **Permission**: admin_platform, platform_manage_users
	"""
	updateDeleteUser(userid: String!): String
	"""
	Change my password.
	+ **Route**: Private
	+ **Permission**: logged in user
	"""
	updateChangeMyPassword(password: String!): String
}